package interfaces

import (
	"encoding/json"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/robfig/cron"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"telegramStravaBot/domain"
	"time"
)

type YandexWeather interface {
	Init()
	GetForecastRequest() *domain.Weather
	GetForecastText() string
}

type yandexWeather struct {
	bot *tgbotapi.BotAPI
}

func NewYandexWeather(bot *tgbotapi.BotAPI) YandexWeather {
	return &yandexWeather{bot: bot}
}

func (y *yandexWeather) Init() {
	c := cron.New()
	c.AddFunc("30 5 * * 2,4,6", func() {
		config := tgbotapi.ChatConfig{ChatID: -1001451720943}
		chat, err := y.bot.GetChat(config)
		if err != nil {
			log.Panic(err)
		}

		newMessage := tgbotapi.NewMessage(chat.ID, " –° –¥–æ–±—Ä—ã–º —É—Ç—Ä–µ—á–∫–æ–º —Ç–µ–±—è,\n"+
			"–£–ª—ã–±–Ω–∏—Å—å —Å–∫–æ—Ä–µ–µ,\n"+
			"–õ–µ–≥–∫–æ–≥–æ –∂–µ–ª–∞—é –¥–Ω—è‚òÄ,\n"+
			"–ë—ã—Ç—å —Ç–µ–±–µ –±–æ–¥—Ä–µ–µ!\n"+
			"\n"+
			"–í—Å—é–¥—É –∏ –≤–µ–∑–¥–µ —É—Å–ø–µ—Ç—å,\n"+
			"–ß–∞—â–µ —É–ª—ã–±–∞—Ç—å—Å—è,\n"+
			"–ê –µ—â–µ –Ω–µ —É—Å—Ç–∞–≤–∞—Ç—å,\n"+
			"–ñ–∏–∑–Ω—å—é –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—èü§ó!\n\n"+y.GetForecastText())
		y.bot.Send(newMessage)
	})
	c.Start()
}

func (y *yandexWeather) GetForecastRequest() *domain.Weather {
	req, err := http.NewRequest("GET", os.Getenv("YANDEX_URL"), nil)
	if err != nil {
		log.Panic(err)
	}
	client := &http.Client{Timeout: 10 * time.Second}
	req.Header.Add("X-Yandex-API-Key", os.Getenv("YANDEX_API_KEY"))
	resp, err := client.Do(req)

	if resp.Body != nil {
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				log.Panic(err)
			}
		}(resp.Body)
	}

	body, readErr := ioutil.ReadAll(resp.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	jsonMap := new(domain.Weather)
	jsonErr := json.Unmarshal(body, &jsonMap)

	if jsonErr != nil {
		log.Fatal(jsonErr)
	}

	//unixTimeUTC:=time.Unix(jsonMap.Now, 0).Format(time.RFC822)
	//
	//fmt.Printf("–î–∞—Ç–∞: %s \n–ü–æ–≥–æ–¥–∞: %d¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: %d¬∞, –æ—Å–∞–¥–∫–∏: %s, —Å–∫. –≤–µ—Ç—Ä–∞: %.1f –º/—Å, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: %d",
	//	unixTimeUTC, jsonMap.Fact.Temp, jsonMap.Fact.Feel, jsonMap.Fact.Condition, jsonMap.Fact.WindSpeed, jsonMap.Fact.Humidity)
	return jsonMap
}

func (y *yandexWeather) GetForecastText() string {
	jsonMap := y.GetForecastRequest()
	unixTimeUTC := time.Unix(jsonMap.Now, 0).Format(time.RFC822)

	return fmt.Sprintf("–î–∞—Ç–∞: %s \n–ü–æ–≥–æ–¥–∞: %d¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: %d¬∞, –æ—Å–∞–¥–∫–∏: %s, —Å–∫. –≤–µ—Ç—Ä–∞: %.1f –º/—Å, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: %d",
		unixTimeUTC, jsonMap.Fact.Temp, jsonMap.Fact.Feel, jsonMap.Fact.Condition, jsonMap.Fact.WindSpeed, jsonMap.Fact.Humidity)
}
