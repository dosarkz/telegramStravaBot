package main

import (
	"encoding/json"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
	"github.com/robfig/cron/v3"
	"io"
	"io/ioutil"
	"log"
	"math"
	"net/http"
	"os"
	"time"
)

var numericKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ö–ª—É–± –õ—é–±–∏—Ç–µ–ª–µ–π –ë–µ–≥–∞ MaratHON"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞"),
		tgbotapi.NewKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–û –Ω–∞—Å"),
		tgbotapi.NewKeyboardButton("–†–∞–∑–º–∏–Ω–∫–∞ –ê–º–æ—Å–æ–≤–∞"),
	),
	// 	tgbotapi.NewKeyboardButtonRow(
	// 		tgbotapi.NewKeyboardButton("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞"),
	// 		tgbotapi.NewKeyboardButton("–°–ë–£ –ò –û–§–ü"),
	// 	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
	),
)

var instagramButtonData = "https://www.instagram.com/metronom_team"
var stravaButtonData = "https://www.strava.com/clubs/540448"
var metronomeButtonData = "https://t.me/joinchat/VoeA783qZuIBa4um"
var botanButtonData = "https://t.me/botandostar"
var centralButtonData = "https://chat.whatsapp.com/LdfZSnyInE7F7PrAfpqaXj"
var weatherAst = "https://api.weather.yandex.ru/v2/informers?lat=51.1801&lon=71.446"
var stravaButton = tgbotapi.InlineKeyboardButton{Text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ Strava", URL: &stravaButtonData}
var instaButton = tgbotapi.InlineKeyboardButton{Text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ Instagram", URL: &instagramButtonData}

var metronomeButton = tgbotapi.InlineKeyboardButton{Text: "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –¢—Ä–∏–∞—Ç–ª–æ–Ω –ø–∞—Ä–∫–µ (Metronome)", URL: &metronomeButtonData}
var botanButton = tgbotapi.InlineKeyboardButton{Text: "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–º —Å–∞–¥—É (–ë–æ—Ç–∞–Ω—ã)", URL: &botanButtonData}
var centralButton = tgbotapi.InlineKeyboardButton{Text: "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º –ø–∞—Ä–∫–µ (whatsapp –≥—Ä—É–ø–ø–∞)", URL: &centralButtonData}
var metroKeyBoard = tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{stravaButton, instaButton})
var marathonKeyBoard = tgbotapi.NewInlineKeyboardMarkup(
	[]tgbotapi.InlineKeyboardButton{metronomeButton},
	[]tgbotapi.InlineKeyboardButton{botanButton},
	[]tgbotapi.InlineKeyboardButton{centralButton})

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_API_KEY"))
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	 req, err := http.NewRequest("GET", weatherAst, nil)
            if err != nil {
                log.Panic(err)
            }
            client := &http.Client{Timeout: 10 * time.Second}
            req.Header.Add("X-Yandex-API-Key", os.Getenv("YANDEX_API_KEY"))
            resp, err := client.Do(req)

            if resp.Body != nil {
                defer func(Body io.ReadCloser) {
                    err := Body.Close()
                    if err != nil {
                        log.Panic(err)
                    }
                }(resp.Body)
            }

            body, readErr := ioutil.ReadAll(resp.Body)
            if readErr != nil {
                log.Fatal(readErr)
            }


            jsonMap := new(Weather)
            jsonErr := json.Unmarshal(body, &jsonMap)

            if jsonErr != nil {
                log.Fatal(jsonErr)
            }

             unixTimeUTC:=time.Unix(jsonMap.Now, 0).Format("Jan 2, 2006 –æ—Ç 3:04 PM")

    weatherStr := fmt.Sprintf("–î–∞—Ç–∞: %s \n–ü–æ–≥–æ–¥–∞: %d¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: %d¬∞, –æ—Å–∞–¥–∫–∏: %s, —Å–∫. –≤–µ—Ç—Ä–∞: %.1f –º/—Å, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: %d",
    unixTimeUTC, jsonMap.Fact.Temp, jsonMap.Fact.Feel, jsonMap.Fact.Condition, jsonMap.Fact.WindSpeed, jsonMap.Fact.Humidity)

	c := cron.New()
    c.AddFunc("30 5 * * 2,4,6", func() {
        config := tgbotapi.ChatConfig{ChatID: -1001451720943}
        chat, err := bot.GetChat(config)
        if err != nil {
            log.Panic(err)
        }

        newMessage := tgbotapi.NewMessage(chat.ID, " –° –¥–æ–±—Ä—ã–º —É—Ç—Ä–µ—á–∫–æ–º —Ç–µ–±—è,\n"+
                                                      "–£–ª—ã–±–Ω–∏—Å—å —Å–∫–æ—Ä–µ–µ,\n"+
                                                      "–õ–µ–≥–∫–æ–≥–æ –∂–µ–ª–∞—é –¥–Ω—è‚òÄ,\n"+
                                                      "–ë—ã—Ç—å —Ç–µ–±–µ –±–æ–¥—Ä–µ–µ!\n"+
                                                        "\n"+
                                                      "–í—Å—é–¥—É –∏ –≤–µ–∑–¥–µ —É—Å–ø–µ—Ç—å,\n"+
                                                      "–ß–∞—â–µ —É–ª—ã–±–∞—Ç—å—Å—è,\n"+
                                                      "–ê –µ—â–µ –Ω–µ —É—Å—Ç–∞–≤–∞—Ç—å,\n"+
                                                      "–ñ–∏–∑–Ω—å—é –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—èü§ó!\n\n"+ weatherStr)
        bot.Send(newMessage)
    })
    c.Start()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {

		if update.Message == nil { // ignore any non-Message Updates
			continue
		}
		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)

		switch update.Message.Text {
		case "/start":
			msg = getStartMessage(update)
			break
		case "/open":
			msg.ReplyMarkup = numericKeyboard
			msg.Text = "–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é"
			break
		case "/close", "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é":
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			msg.Text = "–ó–∞–∫—Ä—ã—Ç–æ"
			break
		case "/rating", "–†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞":
			msg.Text = getRatingClub()
			break
		case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
			msg.Text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –Ω–∞ —É–ª–∏—Ü–µ –≤ 6:00 —É—Ç—Ä–∞:\n" +
				"- –≤—Ç–æ—Ä–Ω–∏–∫,\n" +
				"- —á–µ—Ç–≤–µ—Ä–≥,\n" +
				"- —Å—É–±–±–æ—Ç–∞\n"
			break
		case "–ö–ª—É–± –õ—é–±–∏—Ç–µ–ª–µ–π –ë–µ–≥–∞ MaratHON":
			msg.Text = getMarathonInfo()
			msg.ReplyMarkup = marathonKeyBoard
			break
		case "/club", "–û –Ω–∞—Å":
			msg.Text = getClubInfo()
			msg.ReplyMarkup = metroKeyBoard
			break

		case "–†–∞–∑–º–∏–Ω–∫–∞ –ê–º–æ—Å–æ–≤–∞":
			msg.Text = "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–º–∏–Ω–∫–∏ –ê–º–æ—Å–æ–≤–∞ –æ—Ç –ú–∞—Ä–∞—Ç–∞ –¢–æ–ª–µ–≥–µ–Ω–æ–≤–∏—á–∞, –¥–µ–ª–∞–π—Ç–µ –µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ –±—É–¥–µ—Ç–µ –∑–¥–æ—Ä–æ–≤—ã!\n" +
				"* –ö–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ 100 —Ä–∞–∑!* \n" +
				"- –†—É–∫–∏ –Ω–∞ –ø–æ—è—Å –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–æ–º –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ \n" +
				"- –î–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–æ–º –≤–Ω–∏–∑ –∏ –≤–≤–µ—Ä—Ö \n" +
				"- –°–≥–∏–±–∞–Ω–∏–µ –∏ —Ä–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –∫ —Ü–µ–Ω—Ç—Ä—É \n" +
				"- –ù–æ–≥–∏ –≤–º–µ—Å—Ç–µ, —Å–≥–∏–±–∞–Ω–∏–µ –∏ –ø–æ–ª—É–ø—Ä–∏—Å–µ–¥ –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥ –¥–æ –Ω–∞—á–∞–ª–∞ —Å—Ç–æ–ø—ã \n" +
				"- –°–≥–∏–±–∞–Ω–∏–µ –∏ –ø–æ–ª—É–ø—Ä–∏—Å–µ–¥ –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ \n" +
				"- –ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–æ–≥ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ –∏ –ø—Ä–æ—Ç–∏–≤. \n" +
				"- –í—ã–ø–∞–¥—ã. \n"
			break
		case "/hello":
			msg.Text = "–ü—Ä–∏–≤–µ—Ç, –±–µ–≥—É–Ω!"
			break
		}

		if msg.Text != update.Message.Text {
			fmt.Printf(msg.Text)
			sendMsg(msg, update, bot)
		}
	}
}

func sendMsg(msg tgbotapi.MessageConfig, update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	msg.ReplyToMessageID = update.Message.MessageID
	msg.ParseMode = "markdown"
	_, err := bot.Send(msg)
	if err != nil {
		log.Panic(err)
	}
}

func getRatingClub() string {
	currentTime := time.Now().Format(time.RFC822)
	message := "üèÜ–†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞ üèÉ‚Äç‚ôÄÔ∏èüèÉ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –æ—Ç " + currentTime + "\n"
	message += "\n"
	req, err := http.NewRequest("GET", "https://www.strava.com/clubs/540448/leaderboard", nil)
	if err != nil {
		log.Panic(err)
	}
	client := &http.Client{Timeout: 10 * time.Second}
	req.Header.Add("x-requested-with", `XMLHttpRequest`)
	req.Header.Add("Accept", `text/javascript, application/javascript, application/ecmascript, application/x-ecmascript`)

	resp, err := client.Do(req)

	if resp.Body != nil {
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				log.Panic(err)
			}
		}(resp.Body)
	}

	body, readErr := ioutil.ReadAll(resp.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	jsonMap := make(map[string][]Rating)
	jsonErr := json.Unmarshal(body, &jsonMap)

	if jsonErr != nil {
		log.Fatal(jsonErr)
	}
	for _, items := range jsonMap {
		for i := 0; i < len(items); i++ {
			athleteLink := fmt.Sprintf("https://www.strava.com/athletes/%d", items[i].AthleteId)
			message += fmt.Sprintf("%d) [%s %s](%s) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %.2f –∫–º, –∑–∞–±–µ–≥–∏: %d, —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π: %.2f –∫–º, —Å—Ä.—Ç–µ–º–ø: %.2f /–∫–º \n", items[i].Rank, items[i].AthleteFirstname, items[i].AthleteLastname, athleteLink,
				items[i].Distance/1000, items[i].NumActivities, items[i].BestActivitiesDistance/1000, getPace(items[i].MovingTime, items[i].Distance))
		}
	}
	message += "\n"
	message += "**–•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ‚ÄçüöÄ?** \n –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ [STRAVA](https://www.strava.com/clubs/540448) –∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ üòÄüëç"

	return message
}

func secondsToMinutes(inSeconds int) float64 {
	minutes := inSeconds / 60
	seconds := inSeconds % 60
	return float64(minutes + (seconds / 100))
}

func getPace(movingTime int, distance float32) float64 {
	intPace, float := math.Modf(secondsToMinutes(movingTime) / float64(distance/1000))
	return intPace + (float * 60 / 100)
}

func getStartMessage(update tgbotapi.Update) tgbotapi.MessageConfig {
	msg := tgbotapi.NewMessage(
		update.Message.Chat.ID,
		"*–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç Metronome* üòÉüñê"+
			"\n"+
			"/open ‚û°Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"+
			"/close ‚û°Ô∏è –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"+
			"/rating ‚û°Ô∏è –†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞\n"+
			"/club ‚û°Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ\n")
	msg.ParseMode = "Markdown"
	return msg
}

func getClubInfo() string {
	return "*–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Metronome team!* \n" +
		"74' –≤—ã–ø—É—Å–∫ –æ—Ç —à–∫–æ–ª—ã –±–µ–≥–∞ –ú–∞—Ä–∞—Ç–∞ –ñ—ã–ª–∞–Ω–±–∞–µ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è –±–µ–≥–∞–µ—Ç –≤–æ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞!\n" +
		"–î—Ä—É–∑—å—è, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ —Å—Ç—Ä–∞–Ω–∏—á–∫–∏ –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –±–µ–≥–∞.\n"
}

func getMarathonInfo() string {
	return "*Marat#ON –ö–ª—É–± –ú–∞—Ä–∞—Ñ–æ–Ω—Ü–µ–≤* \n" +
		"–ö–ª—É–± –õ—é–±–∏—Ç–µ–ª–µ–π –ë–µ–≥–∞ Marat#ON (–ú–∞—Ä–∞—Ñ–æ–Ω) –≤–Ω–æ–≤—å —Å–æ–∑–¥–∞–Ω –≤ –≥. –ê—Å—Ç–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ 2017 –≥–æ–¥–∞ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã –±–µ–≥–∞ –ú–∞—Ä–∞—Ç–∞ –ñ—ã–ª–∞–Ω–±–∞–µ–≤–∞.\n –ú–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, —É–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω–µ—Ü, –ø–µ—Ä–≤—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ç–ª–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞, –≤ –æ–¥–∏–Ω–æ—á–∫—É –ø—Ä–æ–±–µ–∂–∞–≤—à–∏–π –∫—Ä—É–ø–Ω–µ–π—à–∏–µ –ø—É—Å—Ç—ã–Ω–∏ –ê–∑–∏–∏, –ê—Ñ—Ä–∏–∫–∏, –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ –∏ –ê–º–µ—Ä–∏–∫–∏.\n –£—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏—Ä–æ–≤—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤, —Å–µ–º—å –∏–∑ –Ω–∏—Ö –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ö–Ω–∏–≥—É —Ä–µ–∫–æ—Ä–¥–æ–≤ –ì–∏–Ω–Ω–µ—Å–∞.\n –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –º–∏—Ä–æ–≤—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ñ—ã–ª–∞–Ω–±–∞–µ–≤—ã–º –≤ –Ω–∞—á–∞–ª–µ 1990-—Ö –≥–æ–¥–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω—ã–º–∏.\n"
}

type Rating struct {
	Distance      float32 `json:"distance"`
	NumActivities int     `json:"num_activities"`
	//elevGain   float32
	MovingTime             int     `json:"moving_time"`
	Velocity               float32 `json:"velocity"`
	BestActivitiesDistance float32 `json:"best_activities_distance"`
	Rank                   int     `json:"rank"`
	AthleteFirstname       string  `json:"athlete_firstname"`
	AthleteId              int     `json:"athlete_id"`
	AthleteLastname        string  `json:"athlete_lastname"`
	//athletePictureUrl string
	//athleteMemberType string
}

type Weather struct {
    Now      int64 `json:"now"`
    Fact    struct {
        Temp int32 `json:"temp"`
        Feel int32 `json:"feels_like"`
        Icon string `json:"icon"`
        Condition string `json:"condition"`
        WindSpeed float32 `json:"wind_speed"`
        Humidity int `json:"humidity"`
    }
    Forecast struct {
        Sunrise string `json:"sunrise"`
    }
}