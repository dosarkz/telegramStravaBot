package main

import (
	"encoding/json"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

var numericKeyboard = tgbotapi.NewReplyKeyboard(
    tgbotapi.NewKeyboardButtonRow(
        tgbotapi.NewKeyboardButton("–ö–ª—É–± –õ—é–±–∏—Ç–µ–ª–µ–π –ë–µ–≥–∞ MaratHON"),
    ),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞"),
		tgbotapi.NewKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞"),
		tgbotapi.NewKeyboardButton("–°–ë–£ –ò –û–§–ü"),
	),
	tgbotapi.NewKeyboardButtonRow(
        tgbotapi.NewKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
    ),
)

var stravaButtonData = "üëçüèª"
var metroKeyBoard  = tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{tgbotapi.InlineKeyboardButton{Text: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Strava", CallbackData: &stravaButtonData}})

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_API_KEY"))
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil { // ignore any non-Message Updates
			continue
		}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)

		switch update.Message.Text {
			case "/start":
				msg = getStartMessage(update)
				 break
            case "/open":
                msg.ReplyMarkup = numericKeyboard
				msg.Text = "–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é"
				 break
            case "/close", "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é":
                msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				msg.Text = "–ó–∞–∫—Ä—ã—Ç–æ"
				break
            case "/rating", "–†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞":
                msg.Text = getRatingClub()
                break
            case "/club":
                msg.Text = getClubInfo()
                msg.ReplyMarkup = metroKeyBoard
                break
            case "/hello":
                msg.Text = "–ü—Ä–∏–≤–µ—Ç, –±–µ–≥—É–Ω!"
				break
            default:
				msg.Text = "–û–π, –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."
		}

		sendMsg(msg, update, bot)
	}
}

func sendMsg(msg tgbotapi.MessageConfig, update tgbotapi.Update, bot *tgbotapi.BotAPI )  {
	msg.ReplyToMessageID = update.Message.MessageID
    msg.ParseMode = "markdown"
    bot.Send(msg)
}

func getRatingClub() string {
	currentTime := time.Now().Format("01-02-2006")
	message := "–†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –æ—Ç "+currentTime+"\n"
	req, err := http.NewRequest("GET", "https://www.strava.com/clubs/540448/leaderboard", nil)
	if err != nil {
		log.Panic(err)
	}
	client := &http.Client{Timeout: 10 * time.Second}
	req.Header.Add("x-requested-with", `XMLHttpRequest`)
	req.Header.Add("Accept", `text/javascript, application/javascript, application/ecmascript, application/x-ecmascript`)

	resp, err := client.Do(req)

	if resp.Body != nil {
		defer resp.Body.Close()
	}

	body, readErr := ioutil.ReadAll(resp.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	jsonMap := make(map[string][]Rating)
	jsonErr := json.Unmarshal(body, &jsonMap)

	if jsonErr != nil {
		log.Fatal(jsonErr)
	}
	for _, items := range jsonMap {
		for i:=0; i<len(items); i++ {
			athleteLink := fmt.Sprintf("https://www.strava.com/athletes/%d", items[i].AthleteId)
			message += fmt.Sprintf("%d) [%s %s](%s) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %1.f –∫–º, –∑–∞–±–µ–≥–∏: %d, —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π: %1.f –∫–º \n", items[i].Rank, items[i].AthleteFirstname, items[i].AthleteLastname, athleteLink,
				items[i].Distance / 1000, items[i].NumActivities, items[i].BestActivitiesDistance / 1000)
		}
	}

	return message
}

func getStartMessage(update tgbotapi.Update) tgbotapi.MessageConfig {
	msg := tgbotapi.NewMessage(
		update.Message.Chat.ID,
		"*–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç Metronome* üòÉüñê"+
			"\n"+
			"/open ‚û°Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"+
			"/close ‚û°Ô∏è –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"+
			"/rating ‚û°Ô∏è –†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞\n" +
			"/club ‚û°Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ\n")
	msg.ParseMode = "Markdown"
	return msg
}

func getClubInfo() string{
    return "*–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Metronome team!* \n" +
    	"74' –≤—ã–ø—É—Å–∫ –æ—Ç —à–∫–æ–ª—ã –±–µ–≥–∞ –ú–∞—Ä–∞—Ç–∞ –ñ—ã–ª–∞–Ω–±–∞–µ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è –±–µ–≥–∞–µ—Ç –≤–æ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞!\n" +
    	"–î—Ä—É–∑—å—è, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
}

type Rates struct {
	data []Rating
}

type Rating struct {
	Distance float32 `json:"distance"`
	NumActivities int `json:"num_activities"`
	//elevGain   float32
	MovingTime int `json:"moving_time"`
	Velocity               float32 `json:"velocity"`
	BestActivitiesDistance float32 `json:"best_activities_distance"`
	Rank             int `json:"rank"`
	AthleteFirstname string `json:"athlete_firstname"`
	AthleteId int `json:"athlete_id"`
	AthleteLastname     string `json:"athlete_lastname"`
	//athletePictureUrl string
	//athleteMemberType string
}