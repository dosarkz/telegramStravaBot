package bot

import (
	"encoding/json"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"sort"
	"strconv"
	"telegramStravaBot/config"
	"telegramStravaBot/domain/strava/entities"
	"time"
)

func getStartMessage(update tgbotapi.Update) tgbotapi.MessageConfig {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, getStartMessageText())
	msg.ParseMode = "Markdown"
	return msg
}

func getOpenMessage(msg tgbotapi.MessageConfig, service *UIMenuService) tgbotapi.MessageConfig {
	msg.ReplyMarkup = service.MainMenu()
	msg.Text = "–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é"
	return msg
}

func getCloseMessage(msg tgbotapi.MessageConfig) tgbotapi.MessageConfig {
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	msg.Text = "–ó–∞–∫—Ä—ã—Ç–æ"
	return msg
}

func getClubMessage(msg tgbotapi.MessageConfig, service *UIMenuService) tgbotapi.MessageConfig {
	msg.Text = getClubMessageText()
	msg.ReplyMarkup = service.MarathonInlineKeyboardMarkup()
	return msg
}

func getRatingMessage(msg tgbotapi.MessageConfig) tgbotapi.MessageConfig {
	currentTime := time.Now().Format(time.RFC822)
	message := "üèÜ–†–µ–π—Ç–∏–Ω–≥ –ú–µ—Ç—Ä–æ–Ω–æ–º–∞ üèÉ‚Äç‚ôÄÔ∏èüèÉ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –æ—Ç " + currentTime + "\n"
	message += "\n"
	req, err := http.NewRequest("GET", "https://www.strava.com/clubs/540448/leaderboard", nil)
	if err != nil {
		log.Panic(err)
	}
	client := &http.Client{Timeout: 10 * time.Second}
	req.Header.Add("x-requested-with", `XMLHttpRequest`)
	req.Header.Add("Accept", `text/javascript, application/javascript, application/ecmascript, application/x-ecmascript`)

	resp, err := client.Do(req)

	if resp.Body != nil {
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				log.Panic(err)
			}
		}(resp.Body)
	}

	body, readErr := ioutil.ReadAll(resp.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	jsonMap := make(map[string][]entities.Rating)
	jsonErr := json.Unmarshal(body, &jsonMap)

	if jsonErr != nil {
		log.Fatal(jsonErr)
	}
	for _, items := range jsonMap {
		for i := 0; i < len(items); i++ {
			if i >= 15 {
				break
			}
			athleteLink := fmt.Sprintf("https://www.strava.com/athletes/%d", items[i].AthleteId)
			message += fmt.Sprintf("%d) [%s %s](%s) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %.2f –∫–º, –∑–∞–±–µ–≥–∏: %d, —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π: %.2f –∫–º, —Å—Ä.—Ç–µ–º–ø: %.2f /–∫–º \n", items[i].Rank, items[i].AthleteFirstname, items[i].AthleteLastname, athleteLink,
				items[i].Distance/1000, items[i].NumActivities, items[i].BestActivitiesDistance/1000, getPace(items[i].MovingTime, items[i].Distance))
		}
	}
	message += "\n"
	message += "**–•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ‚ÄçüöÄ?** \n –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ [STRAVA](https://www.strava.com/clubs/540448) –∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ üòÄüëç"

	msg.Text = message
	return msg
}

func getHeroByDay(msg tgbotapi.MessageConfig) tgbotapi.MessageConfig {
	s := config.Strava{BaseUrl: os.Getenv("STRAVA_BASE_URL")}
	clubId, err := strconv.Atoi(os.Getenv("STRAVA_METRO_GROUP_ID"))
	currentTime := time.Now().Format(time.ANSIC)
	if err != nil {
		log.Panic(err)
	}
	feed := s.Feed(clubId)
	var message = "–ì–µ—Ä–æ–π –¥–Ω—è –æ—Ç " + currentTime + "\n\n"
	sort.SliceStable(feed, func(i, j int) bool {
		return feed[i].Points > feed[j].Points
	})

	for i, items := range feed {
		athleteLink := fmt.Sprintf("https://www.strava.com/athletes/%v", items.AthleteId)
		message += fmt.Sprintf("%v. [%s](%s) - ",
			i+1,
			items.AthleteName,
			athleteLink)
		if items.SwimTotal > 0 {
			message += fmt.Sprintf("üèä‚Äç‚ôÇ %.2f –º, ", items.SwimTotal)
		}
		if items.BikeTotal > 0 {
			message += fmt.Sprintf("üö¥ %.2f –∫–º, ", items.BikeTotal)
		}
		if items.RunTotal > 0 {
			message += fmt.Sprintf("üèÉ %.2f –∫–º ‚õ∞ %d –º, ", items.RunTotal, items.ElevationGain)
		}
		message += fmt.Sprintf("*%.f ≈´pai* \n", items.Points)
	}
	message += "\n\n*–ö–∞–∫ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è ≈´pai –∑–∞ –¥–µ–Ω—å?*\n\n"
	message += "–ü–ª–∞–≤–∞–Ω–∏–µ - –∑–∞ 200 –º –ø–ª–∞–≤–∞–Ω–∏—è - 1 ≈´pai\n"
	message += "–í–µ–ª–æ - –∑–∞ 2 –∫–º –µ–∑–¥—ã - 1 ≈´pai\n"
	message += "–ë–µ–≥ - –∑–∞ 1 –∫–º –±–µ–≥–∞ - 1 ≈´pai, –∑–∞ 100 –º–µ—Ç—Ä–æ–≤ –ø–æ–¥—ä–µ–º–∞ - 10 ≈´pai\n\n"
	message += "**–•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–Ω—è ‚òÄ?** \n –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ [STRAVA](https://www.strava.com/clubs/540448)"
	msg.Text = message
	return msg
}

func replyMessage(msg tgbotapi.MessageConfig, update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	msg.ReplyToMessageID = update.Message.MessageID
	msg.ParseMode = "markdown"
	_, err := bot.Send(msg)
	if err != nil {
		log.Panic(err)
	}
}
