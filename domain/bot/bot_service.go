package bot

import (
	"encoding/json"
	"github.com/go-redis/redis"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"telegramStravaBot/domain"
	"telegramStravaBot/domain/workouts"
)

type UIService struct {
	Menu   *UIMenuService
	Action *UIActionService
	Repos  *domain.Repositories
	Redis  *redis.Client
}

func NewUIService(service UIActionService, repos *domain.Repositories, redis *redis.Client) *UIService {
	return &UIService{
		Action: &service,
		Menu:   &UIMenuService{Button: &UIButtonService{}},
		Repos:  repos,
		Redis:  redis,
	}
}

func (s UIService) Run() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := s.Action.Bot.GetUpdatesChan(u)

	go s.Repos.UserRepository.FindWorkoutsAndSaveScore()

	for update := range updates {
		s.Action.callbackQuery(update, &s)
		mwk := []byte(s.Redis.Get("makeWorkout").Val())

		if update.Message == nil { // ignore any non-Message Updates
			continue
		}
		//	log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
		isGroup := checkIsGroup(update, msg, s.Action.Bot)

		switch update.Message.Text {
		case "‚ö° –†–µ–π—Ç–∏–Ω–≥ –º–µ—Ç—Ä–æ–Ω–æ–º–∞":
			msg = getRatingMessage(msg)
			break
		case "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
			appointmentToRunning(&s, update)
			break
		case "üí• –ì–µ—Ä–æ–π –¥–Ω—è":
			msg = getHeroByDay(msg)
			break
		case "üèÉ –ö–ª—É–± –õ—é–±–∏—Ç–µ–ª–µ–π –ë–µ–≥–∞ MaratHON":
			msg = getClubMessage(msg, s.Menu)
			break
		case "üòä –†–∞–∑–º–∏–Ω–∫–∞ –ê–º–æ—Å–æ–≤–∞":
			msg.Text = amosovMessageText()
			break
		case "‚òÇ –ü–æ–≥–æ–¥–∞":
			msg.Text = s.Action.YA.GetForecastText()
			break
		case "‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
			if isGroup {
				continue
			}
			msg = newTraining(msg, update, s.Redis)
			msg.ReplyMarkup = s.Menu.CreateWorkoutKeyboard()
			break
		}

		switch update.Message.Command() {
		case "start":
			msg = getStartMessage(update)
			break
		case "open":
			msg = getOpenMessage(msg, s.Menu)
			break
		case "close":
			msg = getCloseMessage(msg)
			break
		case "rating":
			msg = getRatingMessage(msg)
			break
		case "newWorkout":
			if isGroup {
				continue
			}
			msg = newTraining(msg, update, s.Redis)
			msg.ReplyMarkup = s.Menu.CreateWorkoutKeyboard()
			break
		case "skipNewWorkout":
			if isGroup {
				continue
			}
			msg.Text = "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ."
			err := s.Redis.Set("makeWorkout", 0, 0).Err()
			if err != nil {
				log.Panic(err)
			}
			break
		case "deleteNewWorkout":
			if isGroup {
				continue
			}
			msg.Text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
			bJson, err := json.Marshal(&workouts.WorkoutStatus{UserId: update.Message.From.ID,
				DeleteStatus: 1})
			if err != nil {
				log.Panic(err)
			}
			err = s.Redis.Set("makeWorkout", bJson, 0).Err()
			if err != nil {
				log.Panic(err)
			}
			break
		case "run":
			appointmentToRunning(&s, update)
			break
		case "club":
			msg = getClubMessage(msg, s.Menu)
			break
		case "weather":
			msg.Text = s.Action.YA.GetForecastText()
			break
		case "amosov":
			msg.Text = amosovMessageText()
			break
		case "back":
			msg.ReplyMarkup = s.Menu.MainMenu()
			msg.Text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
			break
		}

		data := workouts.WorkoutStatus{}
		json.Unmarshal(mwk, &data)

		if !isGroup && data.UserId == update.Message.From.ID {
			if data.CreateStatus != 0 {
				wErr, workout := s.Repos.WorkoutRepository.CallbackNewWorkout(update)

				if wErr {
					msg.Text = "–®–∞–±–ª–æ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–∞."
				} else {
					msg.Text = "–£—Å–ø–µ—à–Ω–æ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ ‚Ññ" + strconv.Itoa(workout.Id)
					err := s.Redis.Set("makeWorkout", 0, 0).Err()
					if err != nil {
						log.Panic(err)
					}
				}
			}

			if data.DeleteStatus != 0 {
				wErr := s.Repos.WorkoutRepository.CallbackDeleteWorkout(update)
				if wErr {
					s.Redis.Set("makeWorkout", 0, 0)
					msg.Text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
				}
			}
		}

		if msg.Text != update.Message.Text {
			replyMessage(msg, update, s.Action.Bot)
		}
	}
}

func newTraining(msg tgbotapi.MessageConfig, update tgbotapi.Update, redis *redis.Client) tgbotapi.MessageConfig {
	msg.Text = getWorkoutNewMessage()
	bJson, err := json.Marshal(&workouts.WorkoutStatus{UserId: update.Message.From.ID,
		CreateStatus: 1})

	err = redis.Set("makeWorkout", bJson, 0).Err()
	if err != nil {
		log.Panic(err)
	}

	return msg
}

func checkIsGroup(update tgbotapi.Update, msg tgbotapi.MessageConfig, Bot *tgbotapi.BotAPI) bool {
	if update.Message.Chat.Type == "group" {
		msg.Text = "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!"
		replyMessage(msg, update, Bot)
		return true
	}
	return false
}
